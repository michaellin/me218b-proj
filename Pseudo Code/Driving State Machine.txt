Driving State Machine:

RunDrivingSM
Takes event as parameter; Returns an event

Define the make transition variable as false
Set next driving state to current driving state
Set entry event kind to normal entry to new state
Set return event to current event (assume we are not consuming event)

Switch between current state
	Case: current state is WAITING2DRIVE	
		Execute during function for this state
		If an event is active
			Switch between the event type of the current event
				Case: ES_OFFROAD
					Set next state to OFFROAD
Set make transition variable as true
					Option to consume event (decide later)
				Break Case
				Case: ES_WIREFOLLOW
					Set next state to WIREFOLLOW
					Set make transition variable as true
					Option to consume event (decide later)
				Break Case
			End switch
		End if
	Break case
	Case: current state is OFFROAD
		Execute during function for this state
		If an event is active
			Switch between the event type of the current event
				Case: ES_FoundCityFreq
					Set next state to WAITING2DRIVE
					Set make transition variable as true
					Option to consume event (decide later)
				Break Case
			End switch
		End if 
	Break case
	Case: current state is WIREFOLLOW
		Execute during function for this state
		If an event is active
			Switch between the event type of the current event
				Case: ES_FoundCityFreq
					Set next state to WAITING2DRIVE
					Set make transition variable as true
					Option to consume event (decide later)
				Break Case
			End switch
		End if 
	Break case
End Switch

If we are making a state transition
	Execute exit function for current state
	Set current state to next state
	Execute entry function for new state
End if
Return ReturnEvent


StartDrivingSM
Takes event parameter of current event. Returns nothing. Does any required initialization for this state machine.

Set current state to Waiting2Drive
Call the Run Driving SM with the current event parameter


DuringWaiting2DriveState
Private function. During function for positioning state.

Assume no re-mapping of consumption of event
If event is ES_Entry or ES_Entry_History
	Implement any entry actions: Stop wheel motors
Else if event is ES_Exit
	Do local exit functionality 
Else
	Do nothing
End if
Return NewEvent

DuringOffRoadState
Private function. During function for positioning state.

Assume no re-mapping of consumption of event
If event is ES_Entry or ES_Entry_History
	Do entry functionality (we moved driving functionality to during)
Else if event is ES_Exit
	Do local exit functionality 
Else
	Implement any during actions: Drive to travel coords along shortest path
End if
Return NewEvent


DuringWireFollow
Private function. During function for positioning state.

Assume no re-mapping of consumption of event
If event is ES_Entry or ES_Entry_History
	Do entry functionality (we moved driving functionality to during)
Else if event is ES_Exit
	Do local exit functionality 
Else
	Implement any during actions: Drive along wire until city found
End if
Return NewEvent


